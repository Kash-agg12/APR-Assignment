# -*- coding: utf-8 -*-
"""APR_Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hr0EyKGIdPa7-GNQoou2JJz0UZGGIjgD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

#1. Load Dataset
df = pd.read_csv("/content/pima-indians-diabetes.csv")

print("Dataset shape:", df.shape)
print("\nColumns:", df.columns.tolist())
print("\nFirst 5 rows:\n", df.head())

#Assume last column is the target
X = df.iloc[:, :-1].values   #features
y = df.iloc[:, -1].values    #target (0=no diabetes, 1=diabetes)

#2. Standardize Data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#3. PCA
pca = PCA(n_components=2)  #reduce to 2D for visualization
X_pca = pca.fit_transform(X_scaled)

print("\nExplained variance ratio:", pca.explained_variance_ratio_)
print("Total variance captured:", np.sum(pca.explained_variance_ratio_))

#Visualization
plt.figure(figsize=(8,6))
plt.scatter(X_pca[y==0, 0], X_pca[y==0, 1], alpha=0.7, label="No Diabetes (0)")
plt.scatter(X_pca[y==1, 0], X_pca[y==1, 1], alpha=0.7, label="Diabetes (1)")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.title("Pima Indians Diabetes Dataset - PCA (2D Projection)")
plt.legend()
plt.show()

#4. Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X_pca, y, test_size=0.3, random_state=42, stratify=y
)

#5. KNN Classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)

#6. Evaluation
print("\nAccuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=["No Diabetes", "Diabetes"]))

#7. Heatmap of Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["No Diabetes", "Diabetes"], yticklabels=["No Diabetes", "Diabetes"])
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix - KNN on PCA Data")
plt.show()

#8. Final Classification for Entire Dataset
#Refit KNN on full dataset (train + test) for final predictions
knn_final = KNeighborsClassifier(n_neighbors=5)
knn_final.fit(X_pca, y)
y_full_pred = knn_final.predict(X_pca)

results_df = df.copy()
results_df["Predicted"] = ["No Diabetes" if p==0 else "Diabetes" for p in y_full_pred]
results_df["Actual"] = ["No Diabetes" if a==0 else "Diabetes" for a in y]

print("\nSample classification results:")
print(results_df.head(15))   #first n=15 rows

results_df.to_csv("pima_predictions.csv", index=False)